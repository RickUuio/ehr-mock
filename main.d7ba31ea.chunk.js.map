{"version":3,"sources":["components/Patient.js","components/Provider.js","components/Header.js","components/Encounters.js","components/EncounterSummary.js","components/CreateReferral.js","components/ReferralSummary.js","components/Referrals.js","App.js","reportWebVitals.js","index.js"],"names":["Patient","patient","className","style","color","firstName","lastName","dob","gender","mrn","Provider","provider","fhirId","uuid","Header","title","id","defaultProps","Encounters","encounterList","currentEncounter","changeCurrentEncounter","refreshEncounters","onClick","console","log","length","map","encounter","index","selected","resource","eClassName","visible","encounterSelected","href","fullUrl","period","start","split","type","text","EncounterSummary","toggleShowNewReferral","showNewReferral","sendNotificationUU","toggle","CreateReferral","onCreate","useState","referredToGroupIds","setReferredToGroupIds","referredFromGroupId","setReferredFromGroupId","networkId","setNetworkId","serviceType","setServiceType","description","setDescription","onSubmit","e","preventDefault","alert","placeholder","readOnly","value","onChange","target","options","selectedIndex","rows","cols","ReferralSummary","referral","ServiceRequest","resourceType","Task","Referrals","referralList","setShowNewReferral","App","defaultPatient","defaultProvider","defaultBaseUrl","referrals","setReferrals","encounters","setEncounters","setPatient","setProvider","setCurrentEncounter","createReferral","a","nowISO","Date","toISOString","url","status","intent","category","coding","system","code","display","priority","subject","reference","authoredOn","requester","orderDetail","fetch","method","headers","body","JSON","stringify","res","json","data","newId","basedOn","for","lastModified","owner","identifier","use","fetchReferrals","baseUrl","encounterId","Accept","entryList","total","entry","filter","forEach","push","serviceRequestId","find","sort","b","timeA","meta","lastUpdated","getTime","fetchEncounters","patientId","getReferrals","getEncounters","notification","useEffect","now","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7ba31ea.chunk.js","sourcesContent":["import { FaRegUser } from \"react-icons/fa\";\n\nconst Patient = ({patient}) => {\n  return (\n    <div className=\"p-2\">\n      <h4 style = {{ color: \"yellow\"}}>\n          <FaRegUser /> {patient.firstName} {patient.lastName}\n      </h4>\n      <h6>\n      <span className='badge badge-light'>DOB</span> : {patient.dob}\n      <span>    </span> \n      <span className='badge badge-light'>Gender</span> : {patient.gender}\n      </h6>\n      <h6><span className='badge badge-light'>MRN</span> : {patient.mrn}</h6>\n    </div>\n  );\n};\n\nexport default Patient;\n","import { FaUserMd } from \"react-icons/fa\";\n\nconst Provider = ({ provider }) => {\n  return (\n    <div className=\"p-2\">\n      <h4 style={{ color: \"HotPink\" }}>\n        {provider.firstName} {provider.lastName} <FaUserMd></FaUserMd>\n      </h4>\n      <h6><span className='badge badge-light'>FHIR ID</span> : {provider.fhirId}</h6>\n      <h6><span className='badge badge-light'>UUID </span> : {provider.uuid}</h6>\n    </div>\n  );\n};\n\nexport default Provider;\n","import PropTypes from \"prop-types\";\nimport Patient from \"./Patient\";\nimport Provider from \"./Provider\";\nimport { FaFire } from \"react-icons/fa\";\n\nconst Header = ({ title, patient, provider }) => {\n  return (\n    <header>\n      <div id=\"navbarTop\">\n        <div className=\"row\">\n          <div className=\"col-lg-6 col-md-12 order-lg-2\">\n            <h2 className=\"p-4\">\n              <FaFire style={{ color: \"#d60c05ee\" }} /> {title}\n            </h2>\n            <h6 className=\"text-info\">[ Hosted on Logica Health FHIR server ]</h6>\n          </div>\n\n          <div className=\"col-lg-3 col-md-6 order-lg-1\">\n            <Patient patient={patient} />\n          </div>\n\n          <div className=\"col-lg-3 col-md-6 order-lg-3\">\n            <Provider provider={provider} />\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nHeader.defaultProps = {\n  title: \"Mock EHR : : Social Care Referrals\",\n};\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\n// const headingStyle = {\n//   color: \"white\",\n//   backgroundColor: \"#2c405a\",\n// };\n\nexport default Header;\n","import {FcRefresh, FcCalendar} from 'react-icons/fc'\nimport {FaCalendarCheck} from 'react-icons/fa'\n\nconst Encounters = ({ encounterList, currentEncounter = 'smart-2', changeCurrentEncounter, refreshEncounters }) => {\n  const refresh = () => {\n    console.log(\"Retrieving patient's encounters\");\n    refreshEncounters();\n  };\n\n  const setCurrentEncounter = (encounterSelected) => {\n    changeCurrentEncounter(encounterSelected)\n  }\n\n  return (\n    <div className=\"encounter col-md-3 col-lg-2 mx-0 px-0\">\n      <div\n        className=\"btn btn-default btn-lg btn-block table-hover mx-0\"\n        onClick={refresh}\n      >\n        All Encounters\n        <div className=\"badge badge-primary mx-2\">{encounterList.length}</div>\n        <FcRefresh />\n      </div>\n\n      <dl>\n        {encounterList.map((encounter, index) => {\n          const selected = (encounter.resource.id === currentEncounter)\n          const eClassName = selected\n            ? \"row table-hover m-0 px-2 selected\"\n            : \"row table-hover m-0 px-2\";\n          const visible = selected\n            ? \"visible\"\n            : \"invisible\";\n\n            return <div key={index} className={eClassName} onClick={() => setCurrentEncounter(encounter.resource.id)}>\n            <dt>\n              <a href={encounter.fullUrl}>{encounter.resource.id} <FaCalendarCheck className={visible} /></a>\n            </dt>\n            <dd>\n              <div>{encounter.resource.period.start.split(\"T\")[0]}</div>\n              <div> {encounter.resource.type[0].text}</div>\n            </dd>\n          </div>\n        }\n        )\n      }\n      </dl>\n    </div>\n  );\n};\n\nexport default Encounters;\n","const EncounterSummary = ({\n  toggleShowNewReferral,\n  showNewReferral,\n  currentEncounter,\n  sendNotificationUU\n}) => {\n  const toggle = () => {\n    toggleShowNewReferral();\n  };\n\n  const sendNotification = () => {\n    console.log(\"sending an encounter notification to Unite Us...\");\n    sendNotificationUU();\n  };\n\n  return (\n    <div className=\"encounterSummary\">\n        <div className=\"h4 pt-2 d-inline-block\">Current Encounter: {currentEncounter}</div>\n      <div\n        className=\"btn btn-primary d-inline float-right\"\n        onClick={sendNotification}\n      >\n        Send Notification to Unite Us\n      </div>\n      {!showNewReferral ? (\n        <div className=\"btn btn-primary d-inline float-right\" onClick={toggle}>\n          Create new referral\n        </div>\n      ) : (\n        <div className=\"btn btn-warning d-inline float-right\" onClick={toggle}>\n          Cancel New Referral\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EncounterSummary;\n","import { useState } from \"react\";\n\nexport const CreateReferral = ({ onCreate, toggleShowNewReferral }) => {\n  const [referredToGroupIds, setReferredToGroupIds] = useState(\"\");\n  const [referredFromGroupId, setReferredFromGroupId] = useState(\"\");\n  const [networkId, setNetworkId] = useState(\"\");\n  const [serviceType, setServiceType] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    if (!serviceType) {\n      alert(\"Please select a service for the referral!\");\n      return;\n    }\n\n    onCreate({\n      serviceType,\n      description,\n      referredToGroupIds,\n      referredFromGroupId,\n      networkId,\n    });\n\n    setReferredToGroupIds(\"\");\n    setReferredFromGroupId(\"demo-hospital\");\n    setNetworkId(\"demo-network\");\n    setServiceType(\"\");\n    setDescription(\"\");\n  };\n\n  const cancelReferralCreation = () => {\n    toggleShowNewReferral();\n  };\n  return (\n    <div className=\"newReferral\">\n      <form className=\"add-form\" onSubmit={onSubmit}>\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <div className=\"form-group\">\n              <label className=\"col-form-label\">SENDING NETWORK</label>\n              <div>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"Healthy Demo Network\"\n                  readOnly\n                  value={networkId}\n                  onChange={(e) => setNetworkId(e.target.value)}\n                />\n              </div>\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"col-form-label\">SENDER</label>\n              <div>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  readOnly\n                  placeholder=\"Local Hospital Center\"\n                  value={referredFromGroupId}\n                  onChange={(e) => setReferredFromGroupId(e.target.value)}\n                />\n              </div>\n            </div>\n          \n            <div className=\"form-group\">\n              <label className=\"col-form-label\">SERVICE TYPE</label>\n              <div>\n                <select\n                  className=\"form-control\"\n                  value={serviceType.value}\n                  onChange={(e) => setServiceType({value: e.target.value, text: e.target.options[e.target.selectedIndex].text})}\n                >\n                  <option>Select a service ...</option>\n                  <option value=\"e281c5da-5fbd-41ea-a32e-6efc32f0a156\">Clothing and Household Goods</option>\n                  <option value=\"ba3eb996-9647-453f-abe4-c04dc84c319e\">Food Assistance</option>\n                  <option value=\"5c7dec03-e340-4b48-8d4b-f24af7410a3a\">Housing and Shelter</option>\n                  <option value=\"eceb120f-4888-4c42-957f-c90fd5582f83\">Transportation</option>\n                </select>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-lg-6\">\n\n          <div className=\"form-group\">\n              <label className=\"col-form-label\">RECEIVING NETWORK</label>\n              <div>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  readOnly\n                  placeholder=\"Healthy Demo Network\"\n                  value={networkId}\n                  onChange={(e) => setNetworkId(e.target.value)}\n                />\n              </div>\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"col-form-label\">RECEIPIENT</label>\n              <div>\n                <select\n                  className=\"form-control\"\n                  value={referredToGroupIds.value}\n                  onChange={(e) => setReferredToGroupIds({value: e.target.value, text: e.target.options[e.target.selectedIndex].text})}\n                >\n                  <option>Select an organization ...</option>\n                  <option value=\"b8835025-bf3f-455f-9b1d-5efda6772b98\">BusRides Sustainable Transportation Act</option>\n                  <option value=\"ebea1516-6343-4f76-980f-a637e580cfd3\">Housing California</option>\n                  <option value=\"3491714a-aa7e-4a9c-a4d7-c8fe7c6b0bc0\">River City Food Bank</option>\n                  <option value=\"9dd692cb-4eb3-46cb-a178-ab9eda2c83f6\">St. Mary's Shelter</option>\n                </select>\n              </div>\n            </div>\n            \n\n            <div className=\"form-group\">\n              <label className=\"col-form-label\">DESCRIPTION</label>\n              <div>\n                <textarea\n                  className=\"form-control\"\n                  rows=\"3\"\n                  cols=\"50\"\n                  placeholder=\"Enter a description for the referral\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row my-2 float-right\">\n\n        <input\n            value=\"Cancel\"\n            className=\"btn btn-warning\"\n            onClick={cancelReferralCreation}\n            readOnly\n          />\n\n          <input\n            value=\"Submit\"\n            className=\"btn btn-primary\"\n            onClick={onSubmit}\n            readOnly\n          />\n\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default CreateReferral;\n","\n\nfunction ReferralSummary({referral}) {\n  return (\n      <div className=\"row table-hover px-3\">\n                  <div className='col-lg-6'>\n                  <a href={referral.ServiceRequest.fullUrl}>\n                    {referral.ServiceRequest.resource.resourceType} : {referral.ServiceRequest.resource.id}\n                  </a>\n                  </div>\n                  <div className='col-lg-6'>\n                  <a href={referral.Task.fullUrl}>\n                    {referral.Task.resource.resourceType} : {referral.Task.resource.id}\n                  </a>\n                  </div>\n                </div>\n  )\n}\n\nexport default ReferralSummary\n","import EncounterSummary from \"./EncounterSummary\";\nimport CreateReferral from \"./CreateReferral\";\nimport { useState } from \"react\";\nimport ReferralSummary from \"./ReferralSummary\";\n\nfunction Referrals({ onCreate, referralList, currentEncounter, sendNotificationUU }) {\n  const [showNewReferral, setShowNewReferral] = useState(false);\n\n  const toggleShowNewReferral = () => {\n    setShowNewReferral((showNewReferral) => !showNewReferral);\n  };\n\n  const onCreateReferral = (referral) => {\n    onCreate(referral);\n    toggleShowNewReferral();\n  };\n  return (\n    <div className=\"col-md-9 col-lg-10 px-0\">\n      <div className=\"referrals\">\n        <EncounterSummary\n          toggleShowNewReferral={toggleShowNewReferral}\n          showNewReferral={showNewReferral}\n          currentEncounter={currentEncounter}\n          sendNotificationUU={sendNotificationUU}\n        />\n        {showNewReferral ? (\n          <CreateReferral\n            onCreate={onCreateReferral}\n            toggleShowNewReferral={toggleShowNewReferral}\n          />\n        ) : null}\n        <div className=\"referralList\">\n          {referralList.length > 0\n            ? referralList.map((referral, index) => (\n                <ReferralSummary key={index} referral = {referral}/>\n              ))\n            : <div className=\"py-3\">No referrals on this encounter.</div>}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Referrals;\n","import \"./App.css\";\nimport Header from \"./components/Header\";\nimport Encounters from \"./components/Encounters\";\nimport Referrals from \"./components/Referrals\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  const defaultPatient = {\n    firstName: \"Aaron\",\n    lastName: \"Alexis\",\n    gender: \"Male\",\n    dob: \"10/26/1989\",\n    mrn: \"smart-9995679\",\n    fhirId: \"smart-9995679\",\n    uuid: \"3f58fa83-f730-462b-9fcf-4a0268471303\",\n  };\n\n  const defaultProvider = {\n    firstName: \"Demo\",\n    lastName: \"Provider\",\n    fhirId: \"smart-Practitioner-71482713\",\n    uuid: \"5977d8b0-a56d-4c8a-8b64-89e4c60b16f2\",\n  };\n\n  const defaultEncounter = \"smart-2\";\n  const defaultBaseUrl = \"https://api.logicahealth.org/uufhircrn/open\";\n  const defaultNotificationUrl =\n    \"https://fhir-crn.uniteusdev.com/v1/FhirNotificationWebService\";\n  const [referrals, setReferrals] = useState([]);\n  const [encounters, setEncounters] = useState([]);\n  const [patient, setPatient] = useState(defaultPatient);\n  const [provider, setProvider] = useState(defaultProvider);\n  const [currentEncounter, setCurrentEncounter] = useState(defaultEncounter);\n\n  // Create a referral\n  const createReferral = async (referral) => {\n    console.log(\"create referral: \", referral);\n    const nowISO = new Date().toISOString();\n\n    let url = \"https://api.logicahealth.org/uufhircrn/open/ServiceRequest\";\n    let resource = {\n      resourceType: \"ServiceRequest\",\n      status: \"active\",\n      intent: \"plan\",\n      category: [\n        {\n          coding: [\n            {\n              system: \"http://snomed.info/sct\",\n              code: \"307835004\",\n              display: \"Referral by service (finding)\",\n            },\n          ],\n          text: \"Referral by service\",\n        },\n      ],\n      priority: \"routine\",\n      subject: {\n        reference: `Patient/${patient.fhirId}`,\n        display: patient.firstName + \" \" + patient.lastName,\n      },\n      encounter: {\n        reference: `Encounter/${currentEncounter}`,\n        display: \"Hospital Admission\",\n      },\n      authoredOn: nowISO,\n      requester: [\n        {\n          reference: `Practitioner/${provider.fhirId}`,\n          display: provider.firstName + \" \" + provider.lastName,\n        },\n      ],\n      orderDetail: {\n        text: referral.serviceType.text,\n        coding: [\n          {\n            system: \"Unite Us\",\n            code: referral.serviceType.value,\n            display: referral.serviceType.text,\n          },\n        ],\n      },\n    };\n\n    let res = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(resource),\n    });\n\n    let data = await res.json();\n    console.log(\"new referral: \", data);\n    let newId = data.id;\n    console.log(\"server request id: \", newId);\n\n    url = \"https://api.logicahealth.org/uufhircrn/open/Task\";\n    resource = {\n      resourceType: \"Task\",\n      basedOn: [\n        {\n          reference: `ServiceRequest/${newId}`,\n        },\n      ],\n      status: \"requested\",\n      intent: \"plan\",\n      priority: \"routine\",\n      for: {\n        reference: `Patient/${patient.fhirId}`,\n        display: patient.firstName + \" \" + patient.lastName,\n      },\n      encounter: {\n        reference: `Encounter/${currentEncounter}`,\n        display: \"Hospital Admission\",\n      },\n      authoredOn: nowISO, //\"2020-09-20T15:41:39Z\",\n      lastModified: nowISO,\n      requester: [\n        {\n          reference: `Practitioner/${provider.fhirId}`,\n          display: provider.firstName + \" \" + provider.lastName,\n        },\n      ],\n      description:\n        referral.description +\n        \"/n referred to : \" +\n        referral.referredToGroupIds.text +\n        \" [\" +\n        referral.referredToGroupIds.value +\n        \"]\",\n      owner: {\n        type: \"Organization\",\n        identifier: {\n          use: \"usual\",\n          system: \"Unite Us\",\n          value: referral.referredToGroupIds.value,\n        },\n        display: referral.referredToGroupIds.text,\n      },\n    };\n\n    res = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(resource),\n    });\n\n    data = await res.json();\n    console.log(\"new referral: \", data);\n    newId = data.id;\n    console.log(\"Task id: \", newId);\n\n    data = await fetchReferrals();\n    console.log(\"new referral list: \", data);\n    setReferrals(data);\n  };\n\n  const fetchReferrals = async (\n    baseUrl = defaultBaseUrl,\n    encounterId = currentEncounter\n  ) => {\n    const url =\n      baseUrl +\n      \"/Task?encounter=\" +\n      encounterId +\n      \"&_include=Task%3Afor%3APatient&_include=Task%3Aencounter&_include=Task%3Arequester&_include=Task%3Abased-on%3AServiceRequest\";\n\n    const res = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const data = await res.json();\n\n    //filter ServiceRequest and Task\n    let entryList = data.total === 0 ? [] : data.entry;\n    if (entryList.length > 0) {\n      entryList = entryList.filter((entry) => {\n        return (\n          entry.resource.resourceType === \"ServiceRequest\" ||\n          entry.resource.resourceType === \"Task\"\n        );\n      });\n    }\n    const referralList = [];\n    entryList.forEach((entry, index) => {\n      if (entry.resource.resourceType === \"ServiceRequest\") {\n        let referral = {\n          id: \"ServiceRequest/\" + entry.resource.id,\n          ServiceRequest: entry,\n        };\n        referralList.push(referral);\n      }\n    });\n\n    entryList.forEach((entry, index) => {\n      if (entry.resource.resourceType === \"Task\") {\n        let serviceRequestId = entry.resource.basedOn[0].reference;\n        let referral = referralList.find((entry, index) => {\n          return entry.id === serviceRequestId;\n        });\n        if (referral) {\n          referral.Task = entry;\n        }\n      }\n    });\n\n    console.log(\"referral list\", referralList);\n    referralList.sort((a, b) => {\n      const timeA = new Date(\n        a.ServiceRequest.resource.meta.lastUpdated\n      ).getTime();\n      const timeB = new Date(\n        b.ServiceRequest.resource.meta.lastUpdated\n      ).getTime();\n      return timeB - timeA;\n    });\n    return referralList;\n  };\n\n  const fetchEncounters = async (\n    baseUrl = defaultBaseUrl,\n    patientId = patient.fhirId\n  ) => {\n    const url = baseUrl + \"/Encounter?patient=\" + patientId;\n    const res = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const data = await res.json();\n\n    const encounterList = data.total > 0 ? data.entry : [];\n\n    encounterList.sort((a, b) => {\n      const timeA = new Date(a.resource.period.start).getTime();\n      const timeB = new Date(b.resource.period.start).getTime();\n      return timeB - timeA;\n    });\n    console.log(\"encounter\", encounterList);\n    return encounterList;\n  };\n\n  const changeCurrentEncounter = async (encounterSelected) => {\n    if (encounterSelected === currentEncounter) return;\n\n    setCurrentEncounter(encounterSelected);\n    const data = await fetchReferrals(defaultBaseUrl, encounterSelected);\n    setReferrals(data);\n    return;\n  };\n\n  const getReferrals = async () => {\n    const data = await fetchReferrals();\n    setReferrals(data);\n  };\n\n  const getEncounters = async () => {\n    const data = await fetchEncounters();\n    setEncounters(data);\n  };\n\n  const sendNotificationUU = async () => {\n    const url = defaultNotificationUrl;\n    const notification = {\n      resourceType: \"Bundle\",\n      type: \"Event\",\n      entry: [\n        {\n          fullUrl: defaultBaseUrl + \"/Encounter/\" + currentEncounter,\n        },\n      ],\n    };\n    const res = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"x-api-key\": \"wOvYlZbrIW6THlB68QcJk6UlCwNPKYHfibNCMj03\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      body: JSON.stringify(notification),\n    });\n    const data = await res.json();\n    console.log(\"notification response: \", data);\n    return data;\n  };\n\n  useEffect(() => {\n    setPatient(defaultPatient);\n    setProvider(defaultProvider);\n    setCurrentEncounter(\"smart-2\");\n    getEncounters();\n    getReferrals();\n    const now = new Date();\n    console.log(\"now is \", new Date().toISOString(), now);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Header patient={patient} provider={provider} />\n      <div className=\"row mt-1 mx-0\">\n        <Encounters\n          encounterList={encounters}\n          currentEncounter={currentEncounter}\n          changeCurrentEncounter={changeCurrentEncounter}\n          refreshEncounters={getEncounters}\n        />\n        <Referrals\n          onCreate={createReferral}\n          referralList={referrals}\n          currentEncounter={currentEncounter}\n          sendNotificationUU={sendNotificationUU}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}